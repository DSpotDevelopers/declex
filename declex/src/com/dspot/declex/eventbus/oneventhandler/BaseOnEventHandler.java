/**
 * Copyright (C) 2016 DSpot Sp. z o.o
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *    http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dspot.declex.eventbus.oneventhandler;

import java.util.HashMap;
import java.util.Map;

import javax.lang.model.element.Element;

import org.androidannotations.AndroidAnnotationsEnvironment;
import org.androidannotations.ElementValidation;
import org.androidannotations.handler.BaseAnnotationHandler;
import org.androidannotations.holder.EComponentHolder;

import com.dspot.declex.api.eventbus.UseEventBus;
import com.dspot.declex.eventbus.EventHandler;
import com.dspot.declex.util.DeclexConstant;
import com.dspot.declex.util.EventUtils;
import com.dspot.declex.util.SharedRecords;
import com.dspot.declex.util.TypeUtils;
import com.helger.jcodemodel.JClassAlreadyExistsException;

public class BaseOnEventHandler extends BaseAnnotationHandler<EComponentHolder> {
	
	private Map<Element, String> inlineEvents = new HashMap<>();
	
	public BaseOnEventHandler(Class<?> targetClass,
			AndroidAnnotationsEnvironment environment) {
		super(targetClass, environment);
	}

	@Override
	public void validate(Element element, ElementValidation valid) {
		UseEventBus annotation = element.getEnclosingElement().getAnnotation(UseEventBus.class);
		if (annotation == null) {
			valid.addError("The enclosing element should include the @UseEventBus annotation");
		}
		
		String classField = TypeUtils.getClassFieldValue(element, getTarget(), "value", getEnvironment());
		
		if (classField.trim().equals("")) {
			valid.addError("No event has been provided");
			return;
		}
		
		String classPath = element.getEnclosingElement().asType().toString();
		classField = DeclexConstant.EVENT_PATH + classField;
		
		if (SharedRecords.getEvent(classField, getEnvironment()) == null) {
			//Declare the event inline			
			if (classField.toLowerCase().startsWith("event")) {
				valid.addError("An event class name cannot start with \"Event\" signature, this is reserved for the system");
				return;
			}
		
			//Add to the Special Events in validation, so other validators will find this Event
			SharedRecords.addEventGeneratedClass(classField, getEnvironment(), classPath);
			
			inlineEvents.put(element, classField);
			
			Map<String, String> fields = new HashMap<>();
			EventHandler.roundGeneratedEvents.put(classField, fields);
		} else {			
			
			//Check if the event was generated by this class
			Map<String, String> events = SharedRecords.getEventGeneratedClasses(getEnvironment());
			if (classPath.equals(events.get(classField))) {
				//Add to the Special Events in validation, so other validators will find this Event
				SharedRecords.addEventGeneratedClass(classField, getEnvironment(), classPath);
				
				inlineEvents.put(element, classField);
				
				Map<String, String> fields = new HashMap<>();
				EventHandler.roundGeneratedEvents.put(classField, fields);	
			}			
		}
	}

	@Override
	public void process(Element element, EComponentHolder holder)
			throws Exception {

		try {

			String className = inlineEvents.get(element);
			if (className == null) return;
			
			EventUtils.createNewEvent(className, getEnvironment());
			
		} catch (JClassAlreadyExistsException e) {
		}
	}
	
}